//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//
//       bebopc version:
//           2.4.6
//
//
//       bebopc source:
//           https://github.com/RainwayApp/bebop
//
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
import { BebopView, BebopRuntimeError } from "bebop";

export const ProtocolVersion: number = 1;

export const GridOpcode: number = 1;

export const PixelOpcode: number = 2;

export const DeltaGridOpcode: number = 3;

export interface IBebopData {
  protocolVersion: number;
  opcode: number;
  encodedData: Uint8Array;
}

export const BebopData = {
  encode(message: IBebopData): Uint8Array {
    const view = BebopView.getInstance();
    view.startWriting();
    this.encodeInto(message, view);
    return view.toArray();
  },

  encodeInto(message: IBebopData, view: BebopView): number {
    const before = view.length;
      view.writeUint32(message.protocolVersion);
      view.writeUint32(message.opcode);
      view.writeBytes(message.encodedData);
    const after = view.length;
    return after - before;
  },

  decode(buffer: Uint8Array): IBebopData {
    const view = BebopView.getInstance();
    view.startReading(buffer);
    return this.readFrom(view);
  },

  readFrom(view: BebopView): IBebopData {
    let field0: number;
    field0 = view.readUint32();
    let field1: number;
    field1 = view.readUint32();
    let field2: Uint8Array;
    field2 = view.readBytes();
    let message: IBebopData = {
      protocolVersion: field0,
      opcode: field1,
      encodedData: field2,
    };
    return message;
  },
};

export interface IGrid {
  rows: Array<IRow>;
}

export const Grid = {
  encode(message: IGrid): Uint8Array {
    const view = BebopView.getInstance();
    view.startWriting();
    this.encodeInto(message, view);
    return view.toArray();
  },

  encodeInto(message: IGrid, view: BebopView): number {
    const before = view.length;
      {
        const length0 = message.rows.length;
        view.writeUint32(length0);
        for (let i0 = 0; i0 < length0; i0++) {
          Row.encodeInto(message.rows[i0], view)
        }
      }
    const after = view.length;
    return after - before;
  },

  decode(buffer: Uint8Array): IGrid {
    const view = BebopView.getInstance();
    view.startReading(buffer);
    return this.readFrom(view);
  },

  readFrom(view: BebopView): IGrid {
    let field0: Array<IRow>;
    {
      let length0 = view.readUint32();
      field0 = new Array<IRow>(length0);
      for (let i0 = 0; i0 < length0; i0++) {
        let x0: IRow;
        x0 = Row.readFrom(view);
        field0[i0] = x0;
      }
    }
    let message: IGrid = {
      rows: field0,
    };
    return message;
  },
};

export interface IRow {
  pixels: Array<IColor>;
}

export const Row = {
  encode(message: IRow): Uint8Array {
    const view = BebopView.getInstance();
    view.startWriting();
    this.encodeInto(message, view);
    return view.toArray();
  },

  encodeInto(message: IRow, view: BebopView): number {
    const before = view.length;
      {
        const length0 = message.pixels.length;
        view.writeUint32(length0);
        for (let i0 = 0; i0 < length0; i0++) {
          Color.encodeInto(message.pixels[i0], view)
        }
      }
    const after = view.length;
    return after - before;
  },

  decode(buffer: Uint8Array): IRow {
    const view = BebopView.getInstance();
    view.startReading(buffer);
    return this.readFrom(view);
  },

  readFrom(view: BebopView): IRow {
    let field0: Array<IColor>;
    {
      let length0 = view.readUint32();
      field0 = new Array<IColor>(length0);
      for (let i0 = 0; i0 < length0; i0++) {
        let x0: IColor;
        x0 = Color.readFrom(view);
        field0[i0] = x0;
      }
    }
    let message: IRow = {
      pixels: field0,
    };
    return message;
  },
};

export interface IPixel {
  x: number;
  y: number;
  color: IColor;
}

export const Pixel = {
  encode(message: IPixel): Uint8Array {
    const view = BebopView.getInstance();
    view.startWriting();
    this.encodeInto(message, view);
    return view.toArray();
  },

  encodeInto(message: IPixel, view: BebopView): number {
    const before = view.length;
      view.writeUint32(message.x);
      view.writeUint32(message.y);
      Color.encodeInto(message.color, view)
    const after = view.length;
    return after - before;
  },

  decode(buffer: Uint8Array): IPixel {
    const view = BebopView.getInstance();
    view.startReading(buffer);
    return this.readFrom(view);
  },

  readFrom(view: BebopView): IPixel {
    let field0: number;
    field0 = view.readUint32();
    let field1: number;
    field1 = view.readUint32();
    let field2: IColor;
    field2 = Color.readFrom(view);
    let message: IPixel = {
      x: field0,
      y: field1,
      color: field2,
    };
    return message;
  },
};

export interface IColor {
  red: number;
  green: number;
  blue: number;
}

export const Color = {
  encode(message: IColor): Uint8Array {
    const view = BebopView.getInstance();
    view.startWriting();
    this.encodeInto(message, view);
    return view.toArray();
  },

  encodeInto(message: IColor, view: BebopView): number {
    const before = view.length;
      view.writeByte(message.red);
      view.writeByte(message.green);
      view.writeByte(message.blue);
    const after = view.length;
    return after - before;
  },

  decode(buffer: Uint8Array): IColor {
    const view = BebopView.getInstance();
    view.startReading(buffer);
    return this.readFrom(view);
  },

  readFrom(view: BebopView): IColor {
    let field0: number;
    field0 = view.readByte();
    let field1: number;
    field1 = view.readByte();
    let field2: number;
    field2 = view.readByte();
    let message: IColor = {
      red: field0,
      green: field1,
      blue: field2,
    };
    return message;
  },
};

export interface IDeltaGrid {
  delta: Array<IPixel>;
}

export const DeltaGrid = {
  encode(message: IDeltaGrid): Uint8Array {
    const view = BebopView.getInstance();
    view.startWriting();
    this.encodeInto(message, view);
    return view.toArray();
  },

  encodeInto(message: IDeltaGrid, view: BebopView): number {
    const before = view.length;
      {
        const length0 = message.delta.length;
        view.writeUint32(length0);
        for (let i0 = 0; i0 < length0; i0++) {
          Pixel.encodeInto(message.delta[i0], view)
        }
      }
    const after = view.length;
    return after - before;
  },

  decode(buffer: Uint8Array): IDeltaGrid {
    const view = BebopView.getInstance();
    view.startReading(buffer);
    return this.readFrom(view);
  },

  readFrom(view: BebopView): IDeltaGrid {
    let field0: Array<IPixel>;
    {
      let length0 = view.readUint32();
      field0 = new Array<IPixel>(length0);
      for (let i0 = 0; i0 < length0; i0++) {
        let x0: IPixel;
        x0 = Pixel.readFrom(view);
        field0[i0] = x0;
      }
    }
    let message: IDeltaGrid = {
      delta: field0,
    };
    return message;
  },
};

